C51 COMPILER V8.09   KING025                                                               07/27/2011 09:39:25 PAGE 1   


C51 COMPILER V8.09, COMPILATION OF MODULE KING025
OBJECT MODULE PLACED IN king025.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE king025.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          #include<stc12c.h>
   3          #include <intrins.h>
   4          
   5          typedef unsigned char uchar;
   6          typedef unsigned char uint;
   7          uchar sta;
   8          //****************************************IO端口定义***************************************
   9          sbit    MISO    =P1^6;
  10          sbit    MOSI    =P1^5;
  11          sbit    SCK         =P1^7;
  12          sbit    CE          =P1^2;
  13          sbit    CSN             =P1^3;
  14          sbit    IRQ             =P3^3;
  15          //***********************************数码管0-9编码*******************************************
  16          uchar TxBuf[32]={0x01,0x02,0x03,0x4,0x05,0x06,0x07,0x08,
  17          0x09,0x10,0x11,0x12,0x13,0x14,0x15,0x16,
  18          0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,
  19          0x25,0x26,0x27,0x28,0x29,0x30,0x31,0x32};         
  20          
  21          //*********************************************NRF24L01*************************************
  22          #define TX_ADR_WIDTH    5       // 5 uints TX address width
  23          #define RX_ADR_WIDTH    5       // 5 uints RX address width
  24          #define TX_PLOAD_WIDTH  32      // 20 uints TX payload
  25          #define RX_PLOAD_WIDTH  32      // 20 uints TX payload
  26          uint const TX_ADDRESS[TX_ADR_WIDTH]= {0x78,0x78,0x78,0x78,0x78};        //本地地址
  27          uint const RX_ADDRESS[RX_ADR_WIDTH]= {0x78,0x78,0x78,0x78,0x78};        //接收地址
  28          //***************************************NRF24L01寄存器指令***********************************************
             -********
  29          #define READ_REG        0x00    // 读寄存器指令
  30          #define WRITE_REG       0x20    // 写寄存器指令
  31          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  32          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  33          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  34          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  35          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  36          #define NOP             0xFF    // 保留
  37          //*************************************SPI(nRF24L01)寄存器地址********************************************
             -********
  38          #define CONFIG          0x00  // 配置收发状态，CRC校验模式以及收发状态响应方式
  39          #define EN_AA           0x01  // 自动应答功能设置  
  40          #define EN_RXADDR       0x02  // 可用信道设置
  41          #define SETUP_AW        0x03  // 收发地址宽度设置
  42          #define SETUP_RETR      0x04  // 自动重发功能设置
  43          #define RF_CH           0x05  // 工作频率设置
  44          #define RF_SETUP        0x06  // 发射速率、功耗功能设置
  45          #define STATUS          0x07  // 状态寄存器
  46          #define OBSERVE_TX      0x08  // 发送监测功能
  47          #define CD              0x09  // 地址检测           
  48          #define RX_ADDR_P0      0x0A  // 频道0接收数据地址
  49          #define RX_ADDR_P1      0x0B  // 频道1接收数据地址
  50          #define RX_ADDR_P2      0x0C  // 频道2接收数据地址
  51          #define RX_ADDR_P3      0x0D  // 频道3接收数据地址
  52          #define RX_ADDR_P4      0x0E  // 频道4接收数据地址
  53          #define RX_ADDR_P5      0x0F  // 频道5接收数据地址
C51 COMPILER V8.09   KING025                                                               07/27/2011 09:39:25 PAGE 2   

  54          #define TX_ADDR         0x10  // 发送地址寄存器
  55          #define RX_PW_P0        0x11  // 接收频道0接收数据长度
  56          #define RX_PW_P1        0x12  // 接收频道0接收数据长度
  57          #define RX_PW_P2        0x13  // 接收频道0接收数据长度
  58          #define RX_PW_P3        0x14  // 接收频道0接收数据长度
  59          #define RX_PW_P4        0x15  // 接收频道0接收数据长度
  60          #define RX_PW_P5        0x16  // 接收频道0接收数据长度
  61          #define FIFO_STATUS     0x17  // FIFO栈入栈出状态寄存器设置
  62          //**************************************************************************************
  63          void Delay(unsigned int s);
  64          void inerDelay_us(unsigned char n);
  65          void init_NRF24L01(void);
  66          uint SPI_RW(uint uchar);
  67          uchar SPI_Read(uchar reg);
  68          void SetRX_Mode(void);
  69          uint SPI_RW_Reg(uchar reg, uchar value);
  70          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars);
  71          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars);
  72          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf);
  73          void nRF24L01_TxPacket(unsigned char * tx_buf);
  74          //*****************************************长延时*****************************************
  75          void delay(void)
  76          {
  77   1      unsigned char i,j,k;
  78   1      for(i=200;i>0;i--)
  79   1      for(j=100;j>0;j--)
  80   1      for(k=25;k>0;k--);
  81   1      }
  82          //******************************************************************************************
  83          /*
  84          uint    bdata sta;   //状态标志
  85          sbit    RX_DR   =sta^6;
  86          sbit    TX_DS   =sta^5;
  87          sbit    MAX_RT  =sta^4;
  88          */
  89          //************************************串口初始化*********************************************************
  90          void StartUART( void )
  91          {                                                       
  92   1              PCON = 0x00;
  93   1      
  94   1              TMOD=0x20;                      //timer1工作方式2
  95   1              TH1=0xfa;                       //SMOD=0 fosc=22.1184M 波特率=9600
  96   1              TL1=0xfa;
  97   1              
  98   1              EA=1;
  99   1              ES=1;                           //开串行口中断
 100   1              TR1=1;                          //开timer1中断
 101   1              
 102   1              REN=1;                          //或SCON=0x50
 103   1              SM0=0;                          //串行口工作方式1
 104   1              SM1=1;
 105   1      }
 106          //************************************通过串口将接收到数据发送给PC端**************************************
 107          void R_S_Byte(uchar R_Byte)
 108          {       
 109   1               SBUF = R_Byte;  
 110   1           while(!TI);                                //查询法
 111   1               TI = 0;    
 112   1      }
 113          /******************************************************************************************
 114          /*延时函数
 115          /******************************************************************************************/
C51 COMPILER V8.09   KING025                                                               07/27/2011 09:39:25 PAGE 3   

 116          void inerDelay_us(unsigned char n)
 117          {
 118   1              for(;n>0;n--)
 119   1                      _nop_();
 120   1      }
 121          //****************************************************************************************
 122          /*NRF24L01初始化
 123          //***************************************************************************************/
 124          void init_NRF24L01(void)
 125          {
 126   1          inerDelay_us(100);
 127   1              CE=0;    // chip enable
 128   1              CSN=1;   // Spi disable 
 129   1              SCK=0;   // Spi clock line init high
 130   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
 131   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
 132   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 133   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21 
 134   1              SPI_RW_Reg(WRITE_REG + SETUP_AW, 0x03);         //设置地址宽度
 135   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x00);       //自动重发         
 136   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0x00);        //设置信道工作为2.4GHZ，收发必须一致
 137   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, 0x3f); //设置接收数据长度，本次设置为32字节
 138   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MHZ，发射功率为最大值0dB       
 139   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 140   1      
 141   1      }
 142          /****************************************************************************************************
 143          /*函数：uint SPI_RW(uint uchar)
 144          /*功能：NRF24L01的SPI写时序
 145          /****************************************************************************************************/
 146          uint SPI_RW(uint uchar)
 147          {
 148   1              uint bit_ctr;
 149   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
 150   1              {
 151   2                      MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
 152   2                      uchar = (uchar << 1);           // shift next bit into MSB..
 153   2                      SCK = 1;                      // Set SCK high..
 154   2                      uchar |= MISO;                    // capture current MISO bit
 155   2                      SCK = 0;                          // ..then set SCK low again
 156   2              }
 157   1          return(uchar);                        // return read uchar
 158   1      }
 159          /****************************************************************************************************
 160          /*函数：uchar SPI_Read(uchar reg)
 161          /*功能：NRF24L01的SPI时序
 162          /****************************************************************************************************/
 163          uchar SPI_Read(uchar reg)
 164          {
 165   1              uchar reg_val;
 166   1              
 167   1              CSN = 0;                // CSN low, initialize SPI communication...
 168   1              SPI_RW(reg);            // Select register to read from..
 169   1              reg_val = SPI_RW(0);    // ..then read registervalue
 170   1              CSN = 1;                // CSN high, terminate SPI communication
 171   1              
 172   1              return(reg_val);        // return register value
 173   1      }
 174          /****************************************************************************************************/
 175          /*功能：NRF24L01读写寄存器函数
 176          /****************************************************************************************************/
 177          uint SPI_RW_Reg(uchar reg, uchar value)
C51 COMPILER V8.09   KING025                                                               07/27/2011 09:39:25 PAGE 4   

 178          {
 179   1              uint status;
 180   1              
 181   1              CSN = 0;                   // CSN low, init SPI transaction
 182   1              status = SPI_RW(reg);      // select register
 183   1              SPI_RW(value);             // ..and write value to it..
 184   1              CSN = 1;                   // CSN high again
 185   1              
 186   1              return(status);            // return nRF24L01 status uchar
 187   1      }
 188          /****************************************************************************************************/
 189          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 190          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 191          /****************************************************************************************************/
 192          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 193          {
 194   1              uint status,uchar_ctr;
 195   1              
 196   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 197   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
 198   1              
 199   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 200   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 201   1              
 202   1              CSN = 1;                           
 203   1              
 204   1              return(status);                    // return nRF24L01 status uchar
 205   1      }
 206          /*********************************************************************************************************
 207          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 208          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 209          /*********************************************************************************************************
             -/
 210          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 211          {
 212   1              uint status,uchar_ctr;
 213   1              
 214   1              CSN = 0;            //SPI使能       
 215   1              status = SPI_RW(reg);   
 216   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 217   1                      SPI_RW(*pBuf++);
 218   1              CSN = 1;           //关闭SPI
 219   1              return(status);    // 
 220   1      }
 221          /****************************************************************************************************/
 222          /*函数：void SetRX_Mode(void)
 223          /*功能：数据接收配置 
 224          /****************************************************************************************************/
 225          void SetRX_Mode(void)
 226          {
 227   1              CE=0;
 228   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 229   1              CE = 1; 
 230   1              inerDelay_us(130);
 231   1      }
 232          /******************************************************************************************************/
 233          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 234          /*功能：数据读取后放如rx_buf接收缓冲区中
 235          /******************************************************************************************************/
 236          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 237          {
 238   1          unsigned char revale=0;
C51 COMPILER V8.09   KING025                                                               07/27/2011 09:39:25 PAGE 5   

 239   1              CE=0;
 240   1                      SPI_RW_Reg(WRITE_REG+STATUS,0x07); 
 241   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f); 
 242   1              CE=1;
 243   1              inerDelay_us(10);
 244   1              inerDelay_us(10);
 245   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 246   1      //      if(RX_DR)                               // 判断是否接收到数据
 247   1      //      {
 248   1                  CE=0;                       //SPI使能
 249   1                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 250   1                      revale =1;                      //读取数据完成标志
 251   1      //      }
 252   1        //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 253   1              return revale;
 254   1      }
 255          /*********************************************************************************************************
             -**
 256          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 257          /*功能：发送 tx_buf中数据
 258          /*********************************************************************************************************
             -*/
 259          void nRF24L01_TxPacket(unsigned char * tx_buf)
 260          {
 261   1              CE=0;           //StandBy I模式 
 262   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);
 263   1              SPI_RW_Reg(WRITE_REG+STATUS,sta); 
 264   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 265   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
 266   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                      // 装载数据
 267   1              CE=1;            //置高CE，激发数据发送
 268   1              inerDelay_us(10);
 269   1              inerDelay_us(10);               
 270   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                    // IRQ收发完成中断响应，16位CRC，主发送
 271   1      
 272   1      /*      if(TX_DS)
 273   1              {
 274   1              CE = 0;                         //SPI使能
 275   1              SPI_RW_Reg(WRITE_REG+STATUS,0x07);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 276   1              R_S_Byte(0x73);
 277   1              }
 278   1      */
 279   1      }
 280          
 281          //************************************主函数************************************************************
 282          void main(void)
 283          {
 284   1      //      uchar temp =0;  
 285   1          init_NRF24L01();
 286   1              StartUART();
 287   1      //      nRF24L01_TxPacket(TxBuf);       // Transmit Tx buffer data
 288   1      //      delay();
 289   1              while(1)
 290   1              {       
 291   2      /*              if(temp<4)
 292   2                      {
 293   2                      switch(temp)
 294   2                      {
 295   2                      case    1:      
 296   2                              P0=     0xBF;
 297   2                              break;  
 298   2                      case    2:       
C51 COMPILER V8.09   KING025                                                               07/27/2011 09:39:25 PAGE 6   

 299   2                              P0=     0xf7;
 300   2                      
 301   2                                      break;  
 302   2                      case    3:
 303   2                              P0=     0xFE;
 304   2      
 305   2                              break;  
 306   2                      default:  break;
 307   2                      }
 308   2                      }
 309   2                      if(temp==3)
 310   2                      {
 311   2                      temp=0;
 312   2                      }
 313   2      */              nRF24L01_TxPacket(TxBuf);       // Transmit Tx buffer data
 314   2      
 315   2                      delay();
 316   2                      SPI_RW_Reg(WRITE_REG+STATUS,0XFF);  
 317   2      //              temp++;
 318   2                      }
 319   1              
 320   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    457    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
